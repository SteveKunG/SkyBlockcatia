buildscript {
    repositories {
        gradlePluginPortal()
        maven {
            url "https://maven.minecraftforge.net"
        }
        maven {
            url "https://repo.spongepowered.org/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

def mcVersion = project.mc_version

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"

version = project.version
group = "com.stevekung.skyblockcatia"
archivesBaseName = "SkyBlockcatia"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = 1.8
compileJava.options.encoding = "UTF-8"

minecraft {
    version = "${forge_version}"
    runDir = "run"
    mappings = "${mcp_mapping}"
    makeObfSourceJar = false
    clientJvmArgs += "-Dmixin.debug.export=true -Dmixin.debug.verbose=true"
    clientRunArgs += "--mixin mixins.skyblockcatia.json --tweakClass org.spongepowered.asm.launch.MixinTweaker"

    if (project.hasProperty("sha1")) {
        replace "@FINGERPRINT@", project.sha1
        replaceIn "SkyBlockcatiaMod.java"
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    embed("org.spongepowered:mixin:0.7.11-SNAPSHOT") { transitive = false }

    if (file("libs/SkyblockAddons.jar").exists()) {
        compile files("libs/SkyblockAddons.jar")
    }
}

repositories {
    maven {
        url "https://repo.spongepowered.org/maven"
    }
}

sourceSets {
    main {
        ext.refMap = "mixins.skyblockcatia.refmap.json"
        output.resourcesDir = java.outputDir
    }
}

jar {
    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "LICENSE.txt", "META-INF/*.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }
    manifest {
        attributes("FMLAT": "skyblockcatia_at.cfg",
                   "FMLCorePluginContainsFMLMod": "false",
                   "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                   "MixinConfigs": "mixins.skyblockcatia.json",
                   "ForceLoadAsMod": "true"
        )
    }
    exclude "debug/**"
    exclude "club/**"
    baseName = "SkyBlockcatia-" + mcVersion
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    baseName = "SkyBlockcatia-" + mcVersion
    exclude "debug/**"
    classifier = "sources"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "LICENSE.txt", "META-INF/*.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }
    manifest {
        attributes("FMLAT": "skyblockcatia_at.cfg",
                   "FMLCorePluginContainsFMLMod": "true",
                   "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                   "MixinConfigs": "mixins.skyblockcatia.json",
                   "ForceLoadAsMod": "true"
        )
    }
    exclude "debug/**"
    baseName = "SkyBlockcatia-" + mcVersion
    classifier = "deobf"
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

curseforge {
    if (project.hasProperty("upload_api_key")) {
        apiKey = project.upload_api_key
        project {
            id = "397441"
            changelog = file("CHANGE_LOG.md")
            changelogType = "markdown"
            releaseType = "release"
            addGameVersion mcVersion

            mainArtifact(jar) {
                displayName = "SkyBlockcatia-" + mcVersion + "-" + version
            }
            addArtifact sourcesJar
            addArtifact deobfJar
        }
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    if (project.hasProperty("upload_api_key")) {
        keyStore = project.keystore_path
        alias = project.alias
        storePass = project.keystore_pass
        keyPass = project.keystore_pass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

build.dependsOn signJar